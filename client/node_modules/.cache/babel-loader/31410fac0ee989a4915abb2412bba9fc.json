{"ast":null,"code":"/**\n * Contains all configured adapters for the given environment.\n *\n * @type {Array}\n * @public\n */\nvar adapters = [];\n/**\n * Contains all modifier functions.\n *\n * @typs {Array}\n * @public\n */\n\nvar modifiers = [];\n/**\n * Our default logger.\n *\n * @public\n */\n\nvar logger = function devnull() {};\n/**\n * Register a new adapter that will used to find environments.\n *\n * @param {Function} adapter A function that will return the possible env.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\n\n\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n  adapters.push(adapter);\n  return true;\n}\n/**\n * Assign a new log method.\n *\n * @param {Function} custom The log method.\n * @public\n */\n\n\nfunction set(custom) {\n  logger = custom;\n}\n/**\n * Check if the namespace is allowed by any of our adapters.\n *\n * @param {String} namespace The namespace that needs to be enabled\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\n * @public\n */\n\n\nfunction enabled(namespace) {\n  var async = [];\n\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n\n    if (adapters[i](namespace)) return true;\n  }\n\n  if (!async.length) return false; //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n\n  return new Promise(function pinky(resolve) {\n    Promise.all(async.map(function prebind(fn) {\n      return fn(namespace);\n    })).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n/**\n * Add a new message modifier to the debugger.\n *\n * @param {Function} fn Modification function.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\n\n\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n  modifiers.push(fn);\n  return true;\n}\n/**\n * Write data to the supplied logger.\n *\n * @param {Object} meta Meta information about the log.\n * @param {Array} args Arguments for console.log.\n * @public\n */\n\n\nfunction write() {\n  logger.apply(logger, arguments);\n}\n/**\n * Process the message with the modifiers.\n *\n * @param {Mixed} message The message to be transformed by modifers.\n * @returns {String} Transformed message.\n * @public\n */\n\n\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n\n  return message;\n}\n/**\n * Introduce options to the logger function.\n *\n * @param {Function} fn Calback function.\n * @param {Object} options Properties to introduce on fn.\n * @returns {Function} The passed function\n * @public\n */\n\n\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n\n  return fn;\n}\n/**\n * Nope, we're not allowed to write messages.\n *\n * @returns {Boolean} false\n * @public\n */\n\n\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n/**\n * Yep, we're allowed to write debug messages.\n *\n * @param {Object} options The options for the process.\n * @returns {Function} The function that does the logging.\n * @public\n */\n\n\nfunction yep(options) {\n  /**\n   * The function that receives the actual debug information.\n   *\n   * @returns {Boolean} indication that we're logging.\n   * @public\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    write.call(write, options, process(args, options));\n    return true;\n  }\n\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n  return introduce(diagnostics, options);\n}\n/**\n * Simple helper function to introduce various of helper methods to our given\n * diagnostics function.\n *\n * @param {Function} diagnostics The diagnostics function.\n * @returns {Function} diagnostics\n * @public\n */\n\n\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n  return diagnostics;\n};","map":{"version":3,"names":["adapters","modifiers","logger","devnull","use","adapter","indexOf","push","set","custom","enabled","namespace","async","i","length","Promise","pinky","resolve","all","map","prebind","fn","then","resolved","values","some","Boolean","modify","write","apply","arguments","process","message","introduce","options","has","Object","prototype","hasOwnProperty","key","call","nope","diagnopes","yep","diagnostics","args","Array","slice","module","exports","create"],"sources":["D:/Other Files/tktnew/eMandate/client/node_modules/@dabh/diagnostics/diagnostics.js"],"sourcesContent":["/**\n * Contains all configured adapters for the given environment.\n *\n * @type {Array}\n * @public\n */\nvar adapters = [];\n\n/**\n * Contains all modifier functions.\n *\n * @typs {Array}\n * @public\n */\nvar modifiers = [];\n\n/**\n * Our default logger.\n *\n * @public\n */\nvar logger = function devnull() {};\n\n/**\n * Register a new adapter that will used to find environments.\n *\n * @param {Function} adapter A function that will return the possible env.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n\n  adapters.push(adapter);\n  return true;\n}\n\n/**\n * Assign a new log method.\n *\n * @param {Function} custom The log method.\n * @public\n */\nfunction set(custom) {\n  logger = custom;\n}\n\n/**\n * Check if the namespace is allowed by any of our adapters.\n *\n * @param {String} namespace The namespace that needs to be enabled\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\n * @public\n */\nfunction enabled(namespace) {\n  var async = [];\n\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n\n    if (adapters[i](namespace)) return true;\n  }\n\n  if (!async.length) return false;\n\n  //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n  return new Promise(function pinky(resolve) {\n    Promise.all(\n      async.map(function prebind(fn) {\n        return fn(namespace);\n      })\n    ).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n\n/**\n * Add a new message modifier to the debugger.\n *\n * @param {Function} fn Modification function.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n\n  modifiers.push(fn);\n  return true;\n}\n\n/**\n * Write data to the supplied logger.\n *\n * @param {Object} meta Meta information about the log.\n * @param {Array} args Arguments for console.log.\n * @public\n */\nfunction write() {\n  logger.apply(logger, arguments);\n}\n\n/**\n * Process the message with the modifiers.\n *\n * @param {Mixed} message The message to be transformed by modifers.\n * @returns {String} Transformed message.\n * @public\n */\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n\n  return message;\n}\n\n/**\n * Introduce options to the logger function.\n *\n * @param {Function} fn Calback function.\n * @param {Object} options Properties to introduce on fn.\n * @returns {Function} The passed function\n * @public\n */\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n\n  return fn;\n}\n\n/**\n * Nope, we're not allowed to write messages.\n *\n * @returns {Boolean} false\n * @public\n */\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n\n/**\n * Yep, we're allowed to write debug messages.\n *\n * @param {Object} options The options for the process.\n * @returns {Function} The function that does the logging.\n * @public\n */\nfunction yep(options) {\n  /**\n   * The function that receives the actual debug information.\n   *\n   * @returns {Boolean} indication that we're logging.\n   * @public\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    write.call(write, options, process(args, options));\n    return true;\n  }\n\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(diagnostics, options);\n}\n\n/**\n * Simple helper function to introduce various of helper methods to our given\n * diagnostics function.\n *\n * @param {Function} diagnostics The diagnostics function.\n * @returns {Function} diagnostics\n * @public\n */\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n\n  return diagnostics;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}