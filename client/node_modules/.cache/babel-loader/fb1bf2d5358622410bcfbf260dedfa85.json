{"ast":null,"code":"/**\r\n * container.js: Inversion of control container for winston logger instances.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar createLogger = require('./create-logger');\n/**\r\n * Inversion of control container for winston logger instances.\r\n * @type {Container}\r\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\r\n   * Constructor function for the Container object responsible for managing a\r\n   * set of `winston.Logger` instances based on string ids.\r\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\r\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Container);\n\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\r\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\r\n   * instance does not exist, one is created.\r\n   * @param {!string} id - The id of the Logger to get.\r\n   * @param {?Object} [options] - Options for the Logger instance.\r\n   * @returns {Logger} - A configured Logger instance with a specified id.\r\n   */\n\n\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n\n        options.transports = existing ? existing.slice() : [];\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n\n      return this.loggers.get(id);\n    }\n    /**\r\n     * Retreives a `winston.Logger` instance for the specified `id`. If\r\n     * an instance does not exist, one is created.\r\n     * @param {!string} id - The id of the Logger to get.\r\n     * @param {?Object} [options] - Options for the Logger instance.\r\n     * @returns {Logger} - A configured Logger instance with a specified id.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n    /**\r\n     * Check if the container has a logger with the id.\r\n     * @param {?string} id - The id of the Logger instance to find.\r\n     * @returns {boolean} - Boolean value indicating if this instance has a\r\n     * logger with the specified `id`.\r\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n    /**\r\n     * Closes a `Logger` instance with the specified `id` if it exists.\r\n     * If no `id` is supplied then all Loggers are closed.\r\n     * @param {?string} id - The id of the Logger instance to close.\r\n     * @returns {undefined}\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n\n      if (id) {\n        return this._removeLogger(id);\n      }\n\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n    /**\r\n     * Remove a logger based on the id.\r\n     * @param {!string} id - The id of the logger to remove.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n\n      var logger = this.loggers.get(id);\n      logger.close();\n\n      this._delete(id);\n    }\n    /**\r\n     * Deletes a `Logger` instance with the specified `id`.\r\n     * @param {!string} id - The id of the Logger instance to delete from\r\n     * container.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n\n  return Container;\n}();","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","createLogger","require","module","exports","Container","options","arguments","undefined","loggers","Map","value","add","id","_this","has","assign","existing","transports","slice","logger","on","_delete","set","get","close","_this2","_removeLogger","forEach","val"],"sources":["D:/Other Files/tktnew/eMandate/client/node_modules/winston/dist/winston/container.js"],"sourcesContent":["/**\r\n * container.js: Inversion of control container for winston logger instances.\r\n *\r\n * (C) 2010 Charlie Robbins\r\n * MIT LICENCE\r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar createLogger = require('./create-logger');\n/**\r\n * Inversion of control container for winston logger instances.\r\n * @type {Container}\r\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\r\n   * Constructor function for the Container object responsible for managing a\r\n   * set of `winston.Logger` instances based on string ids.\r\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\r\n   */\n  function Container() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Container);\n\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\r\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\r\n   * instance does not exist, one is created.\r\n   * @param {!string} id - The id of the Logger to get.\r\n   * @param {?Object} [options] - Options for the Logger instance.\r\n   * @returns {Logger} - A configured Logger instance with a specified id.\r\n   */\n\n\n  _createClass(Container, [{\n    key: \"add\",\n    value: function add(id, options) {\n      var _this = this;\n\n      if (!this.loggers.has(id)) {\n        // Remark: Simple shallow clone for configuration options in case we pass\n        // in instantiated protoypal objects\n        options = Object.assign({}, options || this.options);\n        var existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n        // make copies of those references.\n\n        options.transports = existing ? existing.slice() : [];\n        var logger = createLogger(options);\n        logger.on('close', function () {\n          return _this._delete(id);\n        });\n        this.loggers.set(id, logger);\n      }\n\n      return this.loggers.get(id);\n    }\n    /**\r\n     * Retreives a `winston.Logger` instance for the specified `id`. If\r\n     * an instance does not exist, one is created.\r\n     * @param {!string} id - The id of the Logger to get.\r\n     * @param {?Object} [options] - Options for the Logger instance.\r\n     * @returns {Logger} - A configured Logger instance with a specified id.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(id, options) {\n      return this.add(id, options);\n    }\n    /**\r\n     * Check if the container has a logger with the id.\r\n     * @param {?string} id - The id of the Logger instance to find.\r\n     * @returns {boolean} - Boolean value indicating if this instance has a\r\n     * logger with the specified `id`.\r\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return !!this.loggers.has(id);\n    }\n    /**\r\n     * Closes a `Logger` instance with the specified `id` if it exists.\r\n     * If no `id` is supplied then all Loggers are closed.\r\n     * @param {?string} id - The id of the Logger instance to close.\r\n     * @returns {undefined}\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(id) {\n      var _this2 = this;\n\n      if (id) {\n        return this._removeLogger(id);\n      }\n\n      this.loggers.forEach(function (val, key) {\n        return _this2._removeLogger(key);\n      });\n    }\n    /**\r\n     * Remove a logger based on the id.\r\n     * @param {!string} id - The id of the logger to remove.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_removeLogger\",\n    value: function _removeLogger(id) {\n      if (!this.loggers.has(id)) {\n        return;\n      }\n\n      var logger = this.loggers.get(id);\n      logger.close();\n\n      this._delete(id);\n    }\n    /**\r\n     * Deletes a `Logger` instance with the specified `id`.\r\n     * @param {!string} id - The id of the Logger instance to delete from\r\n     * container.\r\n     * @returns {undefined}\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_delete\",\n    value: function _delete(id) {\n      this.loggers[\"delete\"](id);\n    }\n  }]);\n\n  return Container;\n}();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;IAAE,MAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;EAA2D;AAAE;;AAEzJ,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0C;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;IAA2BE,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;IAAwDD,UAAU,CAACE,YAAX,GAA0B,IAA1B;IAAgC,IAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;IAA4BC,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;EAA4D;AAAE;;AAE7T,SAASO,YAAT,CAAsBd,WAAtB,EAAmCe,UAAnC,EAA+CC,WAA/C,EAA4D;EAAE,IAAID,UAAJ,EAAgBb,iBAAiB,CAACF,WAAW,CAACiB,SAAb,EAAwBF,UAAxB,CAAjB;EAAsD,IAAIC,WAAJ,EAAiBd,iBAAiB,CAACF,WAAD,EAAcgB,WAAd,CAAjB;EAA6CL,MAAM,CAACC,cAAP,CAAsBZ,WAAtB,EAAmC,WAAnC,EAAgD;IAAEU,QAAQ,EAAE;EAAZ,CAAhD;EAAsE,OAAOV,WAAP;AAAqB;;AAE7R,IAAIkB,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;AACA;AACA;AACA;AACA;;;AAGAC,MAAM,CAACC,OAAP,GAAiB,aAAa,YAAY;EACxC;AACF;AACA;AACA;AACA;EACE,SAASC,SAAT,GAAqB;IACnB,IAAIC,OAAO,GAAGC,SAAS,CAAClB,MAAV,GAAmB,CAAnB,IAAwBkB,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;;IAEA1B,eAAe,CAAC,IAAD,EAAOwB,SAAP,CAAf;;IAEA,KAAKI,OAAL,GAAe,IAAIC,GAAJ,EAAf;IACA,KAAKJ,OAAL,GAAeA,OAAf;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;;;EAGET,YAAY,CAACQ,SAAD,EAAY,CAAC;IACvBT,GAAG,EAAE,KADkB;IAEvBe,KAAK,EAAE,SAASC,GAAT,CAAaC,EAAb,EAAiBP,OAAjB,EAA0B;MAC/B,IAAIQ,KAAK,GAAG,IAAZ;;MAEA,IAAI,CAAC,KAAKL,OAAL,CAAaM,GAAb,CAAiBF,EAAjB,CAAL,EAA2B;QACzB;QACA;QACAP,OAAO,GAAGZ,MAAM,CAACsB,MAAP,CAAc,EAAd,EAAkBV,OAAO,IAAI,KAAKA,OAAlC,CAAV;QACA,IAAIW,QAAQ,GAAGX,OAAO,CAACY,UAAR,IAAsB,KAAKZ,OAAL,CAAaY,UAAlD,CAJyB,CAIqC;QAC9D;;QAEAZ,OAAO,CAACY,UAAR,GAAqBD,QAAQ,GAAGA,QAAQ,CAACE,KAAT,EAAH,GAAsB,EAAnD;QACA,IAAIC,MAAM,GAAGnB,YAAY,CAACK,OAAD,CAAzB;QACAc,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,YAAY;UAC7B,OAAOP,KAAK,CAACQ,OAAN,CAAcT,EAAd,CAAP;QACD,CAFD;QAGA,KAAKJ,OAAL,CAAac,GAAb,CAAiBV,EAAjB,EAAqBO,MAArB;MACD;;MAED,OAAO,KAAKX,OAAL,CAAae,GAAb,CAAiBX,EAAjB,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EA5B2B,CAAD,EA8BrB;IACDjB,GAAG,EAAE,KADJ;IAEDe,KAAK,EAAE,SAASa,GAAT,CAAaX,EAAb,EAAiBP,OAAjB,EAA0B;MAC/B,OAAO,KAAKM,GAAL,CAASC,EAAT,EAAaP,OAAb,CAAP;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAVK,CA9BqB,EA0CrB;IACDV,GAAG,EAAE,KADJ;IAEDe,KAAK,EAAE,SAASI,GAAT,CAAaF,EAAb,EAAiB;MACtB,OAAO,CAAC,CAAC,KAAKJ,OAAL,CAAaM,GAAb,CAAiBF,EAAjB,CAAT;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAVK,CA1CqB,EAsDrB;IACDjB,GAAG,EAAE,OADJ;IAEDe,KAAK,EAAE,SAASc,KAAT,CAAeZ,EAAf,EAAmB;MACxB,IAAIa,MAAM,GAAG,IAAb;;MAEA,IAAIb,EAAJ,EAAQ;QACN,OAAO,KAAKc,aAAL,CAAmBd,EAAnB,CAAP;MACD;;MAED,KAAKJ,OAAL,CAAamB,OAAb,CAAqB,UAAUC,GAAV,EAAejC,GAAf,EAAoB;QACvC,OAAO8B,MAAM,CAACC,aAAP,CAAqB/B,GAArB,CAAP;MACD,CAFD;IAGD;IACD;AACJ;AACA;AACA;AACA;AACA;;EAlBK,CAtDqB,EA0ErB;IACDA,GAAG,EAAE,eADJ;IAEDe,KAAK,EAAE,SAASgB,aAAT,CAAuBd,EAAvB,EAA2B;MAChC,IAAI,CAAC,KAAKJ,OAAL,CAAaM,GAAb,CAAiBF,EAAjB,CAAL,EAA2B;QACzB;MACD;;MAED,IAAIO,MAAM,GAAG,KAAKX,OAAL,CAAae,GAAb,CAAiBX,EAAjB,CAAb;MACAO,MAAM,CAACK,KAAP;;MAEA,KAAKH,OAAL,CAAaT,EAAb;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAlBK,CA1EqB,EA8FrB;IACDjB,GAAG,EAAE,SADJ;IAEDe,KAAK,EAAE,SAASW,OAAT,CAAiBT,EAAjB,EAAqB;MAC1B,KAAKJ,OAAL,CAAa,QAAb,EAAuBI,EAAvB;IACD;EAJA,CA9FqB,CAAZ,CAAZ;;EAqGA,OAAOR,SAAP;AACD,CA7H6B,EAA9B"},"metadata":{},"sourceType":"script"}