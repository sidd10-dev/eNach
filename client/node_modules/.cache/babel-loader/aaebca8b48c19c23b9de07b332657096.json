{"ast":null,"code":"'use strict';\n\nvar CronExpression = require('./expression');\n\nfunction CronParser() {}\n/**\n * Parse crontab entry\n *\n * @private\n * @param {String} entry Crontab file entry/line\n */\n\n\nCronParser._parseEntry = function _parseEntry(entry) {\n  var atoms = entry.split(' ');\n\n  if (atoms.length === 6) {\n    return {\n      interval: CronExpression.parse(entry)\n    };\n  } else if (atoms.length > 6) {\n    return {\n      interval: CronExpression.parse(atoms.slice(0, 6).join(' ')),\n      command: atoms.slice(6, atoms.length)\n    };\n  } else {\n    throw new Error('Invalid entry: ' + entry);\n  }\n};\n/**\n * Wrapper for CronExpression.parser method\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\n\n\nCronParser.parseExpression = function parseExpression(expression, options) {\n  return CronExpression.parse(expression, options);\n};\n/**\n * Wrapper for CronExpression.fieldsToExpression method\n *\n * @public\n * @param {Object} fields Input fields\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\n\n\nCronParser.fieldsToExpression = function fieldsToExpression(fields, options) {\n  return CronExpression.fieldsToExpression(fields, options);\n};\n/**\n * Parse content string\n *\n * @public\n * @param {String} data Crontab content\n * @return {Object}\n */\n\n\nCronParser.parseString = function parseString(data) {\n  var blocks = data.split('\\n');\n  var response = {\n    variables: {},\n    expressions: [],\n    errors: {}\n  };\n\n  for (var i = 0, c = blocks.length; i < c; i++) {\n    var block = blocks[i];\n    var matches = null;\n    var entry = block.trim(); // Remove surrounding spaces\n\n    if (entry.length > 0) {\n      if (entry.match(/^#/)) {\n        // Comment\n        continue;\n      } else if (matches = entry.match(/^(.*)=(.*)$/)) {\n        // Variable\n        response.variables[matches[1]] = matches[2];\n      } else {\n        // Expression?\n        var result = null;\n\n        try {\n          result = CronParser._parseEntry('0 ' + entry);\n          response.expressions.push(result.interval);\n        } catch (err) {\n          response.errors[entry] = err;\n        }\n      }\n    }\n  }\n\n  return response;\n};\n/**\n * Parse crontab file\n *\n * @public\n * @param {String} filePath Path to file\n * @param {Function} callback\n */\n\n\nCronParser.parseFile = function parseFile(filePath, callback) {\n  require('fs').readFile(filePath, function (err, data) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    return callback(null, CronParser.parseString(data.toString()));\n  });\n};\n\nmodule.exports = CronParser;","map":{"version":3,"names":["CronExpression","require","CronParser","_parseEntry","entry","atoms","split","length","interval","parse","slice","join","command","Error","parseExpression","expression","options","fieldsToExpression","fields","parseString","data","blocks","response","variables","expressions","errors","i","c","block","matches","trim","match","result","push","err","parseFile","filePath","callback","readFile","toString","module","exports"],"sources":["D:/Other Files/tktnew/eMandate/client/node_modules/cron-parser/lib/parser.js"],"sourcesContent":["'use strict';\n\nvar CronExpression = require('./expression');\n\nfunction CronParser() {}\n\n/**\n * Parse crontab entry\n *\n * @private\n * @param {String} entry Crontab file entry/line\n */\nCronParser._parseEntry = function _parseEntry (entry) {\n  var atoms = entry.split(' ');\n\n  if (atoms.length === 6) {\n    return {\n      interval: CronExpression.parse(entry)\n    };\n  } else if (atoms.length > 6) {\n    return {\n      interval: CronExpression.parse(\n        atoms.slice(0, 6).join(' ')\n      ),\n      command: atoms.slice(6, atoms.length)\n    };\n  } else {\n    throw new Error('Invalid entry: ' + entry);\n  }\n};\n\n/**\n * Wrapper for CronExpression.parser method\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\nCronParser.parseExpression = function parseExpression (expression, options) {\n  return CronExpression.parse(expression, options);\n};\n\n/**\n * Wrapper for CronExpression.fieldsToExpression method\n *\n * @public\n * @param {Object} fields Input fields\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\nCronParser.fieldsToExpression = function fieldsToExpression (fields, options) {\n  return CronExpression.fieldsToExpression(fields, options);\n};\n\n/**\n * Parse content string\n *\n * @public\n * @param {String} data Crontab content\n * @return {Object}\n */\nCronParser.parseString = function parseString (data) {\n  var blocks = data.split('\\n');\n\n  var response = {\n    variables: {},\n    expressions: [],\n    errors: {}\n  };\n\n  for (var i = 0, c = blocks.length; i < c; i++) {\n    var block = blocks[i];\n    var matches = null;\n    var entry = block.trim(); // Remove surrounding spaces\n\n    if (entry.length > 0) {\n      if (entry.match(/^#/)) { // Comment\n        continue;\n      } else if ((matches = entry.match(/^(.*)=(.*)$/))) { // Variable\n        response.variables[matches[1]] = matches[2];\n      } else { // Expression?\n        var result = null;\n\n        try {\n          result = CronParser._parseEntry('0 ' + entry);\n          response.expressions.push(result.interval);\n        } catch (err) {\n          response.errors[entry] = err;\n        }\n      }\n    }\n  }\n\n  return response;\n};\n\n/**\n * Parse crontab file\n *\n * @public\n * @param {String} filePath Path to file\n * @param {Function} callback\n */\nCronParser.parseFile = function parseFile (filePath, callback) {\n  require('fs').readFile(filePath, function(err, data) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    return callback(null, CronParser.parseString(data.toString()));\n  });\n};\n\nmodule.exports = CronParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}