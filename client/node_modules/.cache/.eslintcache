[{"D:\\Other Files\\tktnew\\eMandate\\client\\src\\index.js":"1","D:\\Other Files\\tktnew\\eMandate\\client\\src\\App.js":"2","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Button\\Button.js":"3","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\formContainer\\formContainer.js":"4","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\login\\login.js":"5","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\ErrorModal\\ErrorModal.js":"6","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\2fa\\TwoFactor.js":"7","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Index\\navbar.js":"8"},{"size":297,"mtime":1653373283102,"results":"9","hashOfConfig":"10"},{"size":789,"mtime":1653631634832,"results":"11","hashOfConfig":"10"},{"size":296,"mtime":1653459986146,"results":"12","hashOfConfig":"10"},{"size":19269,"mtime":1653482412171,"results":"13","hashOfConfig":"10"},{"size":4878,"mtime":1653565382549,"results":"14","hashOfConfig":"10"},{"size":983,"mtime":1653460162456,"results":"15","hashOfConfig":"10"},{"size":3783,"mtime":1653481163623,"results":"16","hashOfConfig":"10"},{"size":517,"mtime":1653631728896,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"17zynom",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Other Files\\tktnew\\eMandate\\client\\src\\index.js",[],[],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\App.js",["46","47"],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Button\\Button.js",["48"],[],"import React from 'react';\r\nimport styles from './Button.module.css'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <>\r\n            <button type = {props.type} onClick = {props.onClick} className = {props.className}>{props.children}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Button","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\formContainer\\formContainer.js",["49","50","51"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styles from './formContainer.module.css'\r\nimport { v4 as uuid4 } from 'uuid'\r\nimport Button from '../Button/Button'\r\nimport Schedule from 'react-schedule-job'\r\nimport axios from 'axios'\r\n\r\nconst FormContainer = (props) => {\r\n\r\n    axios.defaults.withCredentials = true\r\n    // UseRef Hooks\r\n    const customerNameRef = useRef()\r\n    const customerTelephoneRef = useRef()\r\n    const customerEmailIdRef = useRef()\r\n    const customerMobileRef = useRef()\r\n    const customerAccountNoRef = useRef()\r\n    const customerStartDateRef = useRef()\r\n    const customerExpiryDateRef = useRef()\r\n    const customerDebitAmountRef = useRef()\r\n    const customerMaxAmountRef = useRef()\r\n    const customerDebitFrequencyRef = useRef()\r\n    const customerSequenceTypeRef = useRef()\r\n    const customerIFSCRef = useRef()\r\n    const customerReference1Ref = useRef()\r\n    const customerReference2Ref = useRef()\r\n    const channelRef = useRef()\r\n    const filler1Ref = useRef()\r\n    const filler2Ref = useRef()\r\n    const filler3Ref = useRef()\r\n    const filler4Ref = useRef()\r\n    const filler5Ref = useRef()\r\n    const filler6Ref = useRef()\r\n    const filler7Ref = useRef()\r\n    const filler8Ref = useRef()\r\n    const filler9Ref = useRef()\r\n    const filler10Ref = useRef()\r\n\r\n    // useState Hooks\r\n    const [banks, setBanks] = useState()\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const fetchBankScheduler = () => {\r\n        axios.get('http://localhost:3001/api/fetchBanks').then(res => {\r\n            // console.log(res.data)\r\n            setBanks(res.data)\r\n        }).catch(e => console.log(e))\r\n    }\r\n\r\n    const loginChecker = () => {\r\n        axios.get('http://localhost:3001/api/login').then(res => {\r\n            // console.log(res)\r\n            setIsLoggedIn(res.data.isLoggedIn)\r\n        }).catch(e => console.log(e))\r\n    }\r\n\r\n    useEffect(() => {\r\n        loginChecker()\r\n        if(isLoggedIn)\r\n            fetchBankScheduler()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn)\r\n            navigate('/login')\r\n    }, [isLoggedIn])\r\n\r\n    const formSubmitHandler = async (event) => {\r\n        event.preventDefault()\r\n        \r\n        let Merchant_Category_Code = ' '\r\n        let Short_Code = ' '\r\n        let UtilCode = ' '\r\n        let CheckSum = ''\r\n        let Customer_Name = customerNameRef.current.value\r\n        let Customer_TelphoneNo = customerTelephoneRef.current.value\r\n        let Customer_EmailId = customerEmailIdRef.current.value\r\n        let Customer_Mobile = customerMobileRef.current.value\r\n        let Customer_AccountNo = customerAccountNoRef.current.value\r\n        let Customer_StartDate = customerStartDateRef.current.value\r\n        let Customer_ExpiryDate = customerExpiryDateRef.current.value\r\n        let Customer_DebitAmount = customerDebitAmountRef.current.value\r\n        let Customer_MaxAmount = customerMaxAmountRef.current.value\r\n        let Customer_DebitFrequency = customerDebitFrequencyRef.current.value\r\n        let Customer_SequenceType = customerSequenceTypeRef.current.value\r\n        let Customer_InstructedMemberId = customerIFSCRef.current.value\r\n        let Customer_Reference1 = customerReference1Ref.current.value\r\n        let Customer_Reference2 = customerReference2Ref.current.value\r\n        let Channel = channelRef.current.value\r\n        let Filler1 = filler1Ref.current.value\r\n        let Filler2 = filler2Ref.current.value\r\n        let Filler3 = filler1Ref.current.value\r\n        let Filler4 = filler1Ref.current.value\r\n        let Filler5 = filler1Ref.current.value\r\n        let Filler6 = filler1Ref.current.value\r\n        let Filler7 = filler1Ref.current.value\r\n        let Filler8 = filler1Ref.current.value\r\n        let Filler9 = filler1Ref.current.value\r\n        let Filler10 = filler1Ref.current.value\r\n\r\n        axios.get('http://localhost:3001/api/getCompanyCreds').then(res => {\r\n            UtilCode = res.data.UtilCode\r\n            Merchant_Category_Code = res.data.CategoryCode\r\n            Short_Code = res.data.ShortCode\r\n        })\r\n\r\n        axios.post('http://localhost:3001/api/aes256encrypt', {\r\n            Customer_Name,\r\n            Customer_Mobile,\r\n            Customer_EmailId,\r\n            Customer_AccountNo,\r\n            Short_Code,\r\n            Customer_Reference1,\r\n            Customer_Reference2,\r\n            UtilCode\r\n        }).then(res => {\r\n            console.log(res)\r\n        }).catch(e => console.log(e))\r\n\r\n        axios.post('http://localhost:3001/api/sha256encrypt', {\r\n            Customer_AccountNo,\r\n            Customer_StartDate,\r\n            Customer_ExpiryDate,\r\n            Customer_DebitAmount,\r\n            Customer_MaxAmount\r\n        }).then(res => {\r\n            console.log(res)\r\n            CheckSum = res.data\r\n        }).catch(e => console.log(e))\r\n\r\n        const MsgId = uuid4()\r\n\r\n        const reqBody = {\r\n            UtilCode,\r\n            Short_Code,\r\n            Merchant_Category_Code,\r\n            CheckSum,\r\n            MsgId,\r\n            Customer_Name,\r\n            Customer_TelphoneNo,\r\n            Customer_EmailId,\r\n            Customer_Mobile,\r\n            Customer_AccountNo,\r\n            Customer_StartDate,\r\n            Customer_ExpiryDate,\r\n            Customer_DebitAmount,\r\n            Customer_MaxAmount,\r\n            Customer_DebitFrequency,\r\n            Customer_SequenceType,\r\n            Customer_InstructedMemberId,\r\n            Customer_Reference1,\r\n            Customer_Reference2,\r\n            Channel,\r\n            Filler1,\r\n            Filler2,\r\n            Filler3,\r\n            Filler4,\r\n            Filler5,\r\n            Filler6,\r\n            Filler7,\r\n            Filler8,\r\n            Filler9,\r\n            Filler10,\r\n        }\r\n    }\r\n\r\n    // const buttonChangeHandler = () => {\r\n    //     console.log(banks)\r\n    // }\r\n\r\n    const jobs = [\r\n        {\r\n            fn: fetchBankScheduler,\r\n            id: '1',\r\n            schedule: '30 9,21 * * *'\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <h2 className = \"header\">eMandate Form</h2>\r\n            <div className={`${styles['container']}`}>\r\n            <form className={`${styles['form-container']}`} onSubmit={formSubmitHandler}>\r\n                <div className={`${styles['input-block-container']}`}>\r\n                    <div className={`${styles['left-container']}`}>\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_Name\" className={`${styles['label']}`}>Customer Name*</label>\r\n                            <input type=\"text\" id=\"Customer_Name\" name=\"Customer_Name\" required ref={customerNameRef}></input>\r\n                        </div>\r\n                        {/* <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"UtilCode\" className={`${styles['label']}`}>Utility Code*</label>\r\n                            <input type=\"text\" id=\"UtilCode\" name=\"UtilCode\" required ref={utilCodeRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Merchant_Category_Code\" className={`${styles['label']}`}>Category Code*</label>\r\n                            <input type=\"text\" id=\"Merchant_Category_Code\" name=\"Merchant_Category_Code\" required ref={merchantCategoryCodeRef}></input>\r\n                        </div> */}\r\n\r\n                        {/* <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"MsgID\" className={`${styles['label']}`}>MsgId*</label>\r\n                            <input type=\"text\" id=\"MsgID\" name=\"MsgID\" required ref={msgIdRef}></input>\r\n                        </div> */}\r\n\r\n\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_EmailId\" className={`${styles['label']}`}>Customer Email Id*</label>\r\n                            <input type=\"text\" id=\"Customer_EmailId\" name=\"Customer_EmailId\" ref={customerEmailIdRef} required></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_StartDate\" className={`${styles['label']}`}>Start Date*</label>\r\n                            <input type=\"date\" id=\"Customer_StartDate\" name=\"Customer_StartDate\" required ref={customerStartDateRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_DebitAmount\" className={`${styles['label']}`}>Amount to be Debitted*</label>\r\n                            <input type=\"number\" id=\"Customer_DebitAmount\" name=\"Customer_DebitAmount\" required ref={customerDebitAmountRef}></input>\r\n                        </div>\r\n\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_MaxAmount\" className={`${styles['label']}`}>Max Amount</label>\r\n                            <input type=\"text\" id=\"Customer_MaxAmount\" name=\"Customer_MaxAmount\" ref={customerMaxAmountRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_InstructedMemberId\" className={`${styles['label']}`}>IFSC Code*</label>\r\n                            <input type=\"text\" id=\"Customer_InstructedMemberId\" name=\"Customer_InstructedMemberId\" required ref={customerIFSCRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_Reference1\" className={`${styles['label']}`}>Customer Reference 1</label>\r\n                            <input type=\"text\" id=\"Customer_Reference1\" name=\"Customer_Reference1\" ref={customerReference1Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler1\" className={`${styles['label']}`}>Filler 1</label>\r\n                            <input type=\"text\" id=\"Filler1\" name=\"Filler1\" placeholder=\"Filler1\" ref={filler1Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler3\" className={`${styles['label']}`}>Filler 3</label>\r\n\r\n                            <input type=\"text\" id=\"Filler3\" name=\"Filler3\" placeholder=\"Filler3\" ref={filler3Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler5\" className={`${styles['label']}`}>Filler 5 - Account Type*</label>\r\n                            <select id=\"Filler5\" name=\"Filler5\" ref={filler5Ref}>\r\n                                <option value=\"S\">Savings</option>\r\n                                <option value=\"C\">Current</option>\r\n                                <option value=\"O\">Other</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler7\" className={`${styles['label']}`}>Filler 7</label>\r\n                            <input type=\"text\" id=\"Filler7\" name=\"Filler7\" placeholder=\"Filler7\" ref={filler7Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler9\" className={`${styles['label']}`}>Filler 9 - To be left blank</label>\r\n                            <input type=\"text\" id=\"Filler9\" name=\"Filler9\" ref={filler9Ref}></input>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className={`${styles['right-container']}`}>\r\n\r\n                        {/* <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Short_Code\" className={`${styles['label']}`}>Short Code*</label>\r\n                            <input type=\"text\" id=\"Short_Code\" name=\"Short_Code\" required ref={shortCodeRef}></input>\r\n                        </div> */}\r\n\r\n                        {/* <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"CheckSum\" className={`${styles['label']}`}>Checksum*</label>\r\n                            <input type=\"text\" id=\"CheckSum\" name=\"CheckSum\" required ref={checkSumRef}></input>\r\n                        </div> */}\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_Mobile\" className={`${styles['label']}`}>Customer MobileNo*</label>\r\n                            <input type=\"number\" id=\"Customer_Mobile\" name=\"Customer_Mobile\" ref={customerMobileRef} required></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_TelphoneNo\" className={`${styles['label']}`}>Customer TelphoneNo</label>\r\n                            <input type=\"number\" id=\"Customer_TelphoneNo\" name=\"Customer_TelphoneNo\" ref={customerTelephoneRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_ExpiryDate\" className={`${styles['label']}`}>Expiry Date</label>\r\n                            <input type=\"date\" id=\"Customer_ExpiryDate\" name=\"Customer_ExpiryDate\" ref={customerExpiryDateRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_AccountNo\" className={`${styles['label']}`}>Customer Account No*</label>\r\n                            <input type=\"text\" id=\"Customer_AccountNo\" name=\"Customer_AccountNo\" required ref={customerAccountNoRef}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_DebitFrequency\" className={`${styles['label']}`}>Debit Frequency*</label>\r\n                            <select id=\"Customer_DebitFrequency\" name=\"Customer_DebitFrequency\" ref={customerDebitFrequencyRef}>\r\n                                <option value=\"ADHO\">As and when presented</option>\r\n                                <option value=\"INDA\">Intra-day</option>\r\n                                <option value=\"DAIl\">Daily</option>\r\n                                <option value=\"WEEK\">Weekly</option>\r\n                                <option value=\"MNTH\">Monthly</option>\r\n                                <option value=\"BIMN\">Bi-Monthly</option>\r\n                                <option value=\"QURT\">Quarterly</option>\r\n                                <option value=\"MIAN\">Half - Yearly</option>\r\n                                <option value=\"YEAR\">Yearly</option>\r\n                                <option value=\"\">One Off Payment</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_SequenceType\" className={`${styles['label']}`}>Customer Sequence Type*</label>\r\n                            <select id=\"Customer_SequenceType\" name=\"Customer_SequenceType\" ref={customerSequenceTypeRef}>\r\n                                <option value=\"RCUR\">Recurring</option>\r\n                                <option value=\"OOFF\">One Off</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Customer_Reference2\" className={`${styles['label']}`}>Customer Reference 2</label>\r\n                            <input type=\"text\" id=\"Customer_Reference2\" name=\"Customer_Reference2\" ref={customerReference2Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Channel\" className={`${styles['label']}`}>Channel - Netbanking/Debit card</label>\r\n                            <select id=\"Channel\" name=\"Channel\" ref={channelRef}>\r\n                                <option value=\"Net\">Netbanking</option>\r\n                                <option value=\"Debit\">Debit Card</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler2\" className={`${styles['label']}`}>Filler 2</label>\r\n                            <input type=\"text\" id=\"Filler2\" name=\"Filler2\" placeholder=\"Filler2\" ref={filler2Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler4\" className={`${styles['label']}`}>Filler 4 - PAN Number*</label>\r\n                            <input type=\"text\" id=\"Filler4\" name=\"Filler4\" ref={filler4Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler6\" className={`${styles['label']}`}>Filler 6 - Customer Bank*</label>\r\n                            <select id=\"Filler6\" name=\"Filler6\" ref={filler6Ref}>\r\n                                {banks && banks.map(bank => (\r\n                                    <option value={bank.bankID}>\r\n                                        {bank.bankName}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler8\" className={`${styles['label']}`}>Filler 8</label>\r\n                            <input type=\"text\" id=\"Filler8\" name=\"Filler8\" placeholder=\"Filler8\" className={`${styles['input']}`} ref={filler8Ref}></input>\r\n                        </div>\r\n\r\n                        <div className={`${styles['input-container']}`}>\r\n                            <label htmlFor=\"Filler10\" className={`${styles['label']}`}>Filler 10 - To be left blank</label>\r\n                            <input type=\"text\" id=\"Filler10\" name=\"Filler10\" placeholder=\"\" className={`${styles['input']}`} ref={filler10Ref}></input>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Button type=\"submit\">Submit</Button>\r\n            </form>\r\n            {/* <button type=\"button\" onClick={buttonChangeHandler}>trigger</button> */}\r\n            <Schedule jobs={jobs} timeZone='UTC' dashboard={{ hidden: true }} />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormContainer","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\login\\login.js",["52","53","54"],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\ErrorModal\\ErrorModal.js",[],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\2fa\\TwoFactor.js",["55","56","57"],[],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"../Button/Button\";\r\nimport ErrorModal from \"../ErrorModal/ErrorModal\";\r\nimport styles from './TwoFactor.module.css';\r\n\r\nconst TwoFactor = (props) => {\r\n    const [isValidUser, setIsValidUser] = useState(false)\r\n    const [token, setToken] = useState()\r\n    const [username, setUserName] = useState()\r\n    const [error, setError] = useState(null)\r\n    const [qr, setQr] = useState(\"\")\r\n    const userNameInputRef = useRef()\r\n    const passwordInputRef = useRef()\r\n    const codeInputRef = useRef()\r\n    const navigate = useNavigate()\r\n\r\n    // const resetForm = () => {\r\n    //     userNameInputRef.current.value = \"\"\r\n    //     passwordInputRef.current.value = \"\"\r\n    //     codeInputRef.current.value = \"\"\r\n    // }\r\n\r\n    const verifyFormHandler = (event) => {\r\n        event.preventDefault()\r\n        setUserName(userNameInputRef.current.value)\r\n        const password = passwordInputRef.current.value\r\n        const name = userNameInputRef.current.value\r\n        axios.post(\"http://localhost:3001/api/verifyUser\", {\r\n            name,\r\n            password\r\n        }).then(async (res) => {\r\n            // console.log(res.data.token)\r\n            setIsValidUser(res.data.isValidUser)\r\n            setToken(res.data.token)\r\n            setQr(res.data.qr)\r\n            // console.log(isValidUser)\r\n        }).catch(e => {\r\n            setError({ msg: e.response.data.msg })\r\n            // console.log(e)\r\n        })\r\n    }\r\n\r\n    const twoFactorSubmitHandler = (event) => {\r\n        event.preventDefault()\r\n        const code = codeInputRef.current.value\r\n        console.log(username)\r\n        axios.post(\"http://localhost:3001/api/2FAregister\", {\r\n            username,\r\n            code\r\n        }).then(res => {\r\n            if (res.data.registrationComplete) {\r\n                navigate('/login')\r\n            }\r\n        }).catch(e => {\r\n            setError({ msg: e.response.data || e.msg })\r\n            console.log(e)\r\n        })\r\n        setIsValidUser(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isValidUser && (\r\n                <>\r\n                    <h2>Set Up 2FA</h2>\r\n                    <div>\r\n                        <img src={qr} className={styles.qr}></img>\r\n                        <form onSubmit={twoFactorSubmitHandler}>\r\n                            {/* <label htmlFor=\"username\">Username</label>\r\n                            <input type=\"text\" name=\"username\" ref={userNameInputRef}></input> */}\r\n                            <label htmlFor=\"2FACode\">2FA Code</label>\r\n                            <input type=\"text\" name=\"2FACode\" ref={codeInputRef}></input>\r\n                            <button type=\"submit\">Submit</button>\r\n                        </form>\r\n                    </div>\r\n                </>\r\n            )}\r\n            {!isValidUser && (\r\n                <>\r\n                    {error && (\r\n                        <ErrorModal errorMsg={error.msg} onCancelError={() => setError(null)}></ErrorModal>\r\n                    )}\r\n                    <h2>Enter your company credentials</h2>\r\n                    <form onSubmit={verifyFormHandler}>\r\n                        <label htmlFor=\"username\">Username</label>\r\n                        <input type=\"text\" name=\"username\" ref={userNameInputRef}></input>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" name=\"password\" ref={passwordInputRef}></input>\r\n                        <Button type=\"submit\">Login</Button>\r\n                    </form>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TwoFactor","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Index\\navbar.js",["58","59"],[],{"ruleId":"60","severity":1,"message":"61","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":18},{"ruleId":"60","severity":1,"message":"64","line":2,"column":20,"nodeType":"62","messageId":"63","endLine":2,"endColumn":29},{"ruleId":"60","severity":1,"message":"65","line":2,"column":8,"nodeType":"62","messageId":"63","endLine":2,"endColumn":14},{"ruleId":"66","severity":1,"message":"67","line":63,"column":8,"nodeType":"68","endLine":63,"endColumn":10,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":68,"column":8,"nodeType":"68","endLine":68,"endColumn":20,"suggestions":"71"},{"ruleId":"60","severity":1,"message":"72","line":135,"column":15,"nodeType":"62","messageId":"63","endLine":135,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":28,"column":29,"nodeType":"75","messageId":"76","endLine":28,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":30,"column":29,"nodeType":"75","messageId":"76","endLine":30,"endColumn":31},{"ruleId":"66","severity":1,"message":"70","line":77,"column":8,"nodeType":"68","endLine":77,"endColumn":10,"suggestions":"77"},{"ruleId":"60","severity":1,"message":"64","line":3,"column":28,"nodeType":"62","messageId":"63","endLine":3,"endColumn":37},{"ruleId":"60","severity":1,"message":"78","line":11,"column":12,"nodeType":"62","messageId":"63","endLine":11,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":70,"column":25,"nodeType":"81","endLine":70,"endColumn":61},{"ruleId":"79","severity":1,"message":"80","line":10,"column":25,"nodeType":"81","endLine":10,"endColumn":64},{"ruleId":"82","severity":1,"message":"83","line":14,"column":17,"nodeType":"81","endLine":14,"endColumn":52},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'styles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["85"],"'reqBody' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["86"],"'token' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [isLoggedIn]",{"range":"93","text":"94"},"Update the dependencies array to be: [isLoggedIn, navigate]",{"range":"95","text":"96"},"Update the dependencies array to be: [navigate]",{"range":"97","text":"98"},[2109,2111],"[isLoggedIn]",[2203,2215],"[isLoggedIn, navigate]",[2612,2614],"[navigate]"]