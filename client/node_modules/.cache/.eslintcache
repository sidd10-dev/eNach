[{"D:\\Other Files\\tktnew\\eMandate\\client\\src\\index.js":"1","D:\\Other Files\\tktnew\\eMandate\\client\\src\\App.js":"2","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Button\\Button.js":"3","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\formContainer\\formContainer.js":"4","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\login\\login.js":"5","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\ErrorModal\\ErrorModal.js":"6","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\2fa\\TwoFactor.js":"7","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Navbar\\navbar.js":"8","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\logout\\logout.js":"9","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\logs\\logs.js":"10","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\TNC\\tnc.js":"11"},{"size":297,"mtime":1653373283102,"results":"12","hashOfConfig":"13"},{"size":1011,"mtime":1653996525133,"results":"14","hashOfConfig":"13"},{"size":296,"mtime":1653459986146,"results":"15","hashOfConfig":"13"},{"size":23028,"mtime":1654150707617,"results":"16","hashOfConfig":"13"},{"size":5867,"mtime":1653999317262,"results":"17","hashOfConfig":"13"},{"size":1089,"mtime":1653997584689,"results":"18","hashOfConfig":"13"},{"size":6677,"mtime":1654064602613,"results":"19","hashOfConfig":"13"},{"size":1809,"mtime":1653897837440,"results":"20","hashOfConfig":"13"},{"size":467,"mtime":1653647224576,"results":"21","hashOfConfig":"13"},{"size":5217,"mtime":1654065771910,"results":"22","hashOfConfig":"13"},{"size":3701,"mtime":1654149509784,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"17zynom",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Other Files\\tktnew\\eMandate\\client\\src\\index.js",[],[],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\App.js",["62","63"],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Button\\Button.js",["64"],[],"import React from 'react';\r\nimport styles from './Button.module.css'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <>\r\n            <button type = {props.type} onClick = {props.onClick} className = {props.className}>{props.children}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Button","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\formContainer\\formContainer.js",["65","66"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styles from './formContainer.module.css'\r\nimport { v4 as uuid4 } from 'uuid'\r\nimport Button from '../Button/Button'\r\nimport Schedule from 'react-schedule-job'\r\nimport axios from 'axios'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\nimport Navbar from \"../Navbar/navbar\";\r\nimport TNC from \"../TNC/tnc\";\r\n\r\nconst FormContainer = (props) => {\r\n\r\n    axios.defaults.withCredentials = true\r\n    // UseRef Hooks\r\n    const customerNameRef = useRef()\r\n    const customerTelephoneRef = useRef()\r\n    const customerEmailIdRef = useRef()\r\n    const customerMobileRef = useRef()\r\n    const customerAccountNoRef = useRef()\r\n    const customerStartDateRef = useRef()\r\n    const customerExpiryDateRef = useRef()\r\n    const customerDebitAmountRef = useRef()\r\n    const customerMaxAmountRef = useRef()\r\n    const customerDebitFrequencyRef = useRef()\r\n    const customerSequenceTypeRef = useRef()\r\n    const customerIFSCRef = useRef()\r\n    const customerReference1Ref = useRef()\r\n    const customerReference2Ref = useRef()\r\n    const channelRef = useRef()\r\n    const filler1Ref = useRef()\r\n    const filler2Ref = useRef()\r\n    const filler3Ref = useRef()\r\n    const filler4Ref = useRef()\r\n    const filler5Ref = useRef()\r\n    const filler6Ref = useRef()\r\n    const filler7Ref = useRef()\r\n    const filler8Ref = useRef()\r\n    const filler9Ref = useRef()\r\n    const filler10Ref = useRef()\r\n\r\n    // useState Hooks\r\n    const [banks, setBanks] = useState()\r\n    const [isLoggedIn, setIsLoggedIn] = useState(true)\r\n    const [accept, setAccept] = useState(false)\r\n    const [navbarElements, setNavbarElements] = useState([\r\n        {\r\n            name: \"Logout\",\r\n            link: \"logout\",\r\n            click: false\r\n        },\r\n        {\r\n            name: \"eMandate\",\r\n            link: \"eMandate\",\r\n            click: true\r\n        }\r\n    ])\r\n\r\n    const navigate = useNavigate()\r\n    const fetchBankScheduler = () => {\r\n        axios.get('http://localhost:3001/api/fetchBanks').then(res => {\r\n            // console.log(res.data)\r\n            setBanks(res.data)\r\n        }).catch(e => console.log(e))\r\n    }\r\n\r\n    const loginChecker = () => {\r\n        axios.get('http://localhost:3001/api/login').then(res => {\r\n            // console.log(res)\r\n            setIsLoggedIn(res.data.isLoggedIn)\r\n        }).catch(e => console.log(e))\r\n    }\r\n\r\n    const tncHandler = () => {\r\n        setAccept(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loginChecker()\r\n        if (isLoggedIn) {\r\n            fetchBankScheduler()\r\n            axios.get('http://localhost:3001/api/staff_status').then(resp => {\r\n                if (resp.data.staff_status)\r\n                    setNavbarElements((prev) => {\r\n                        return [\r\n                            {\r\n                                name: \"Logout\",\r\n                                link: \"logout\",\r\n                                click: false\r\n                            },\r\n                            {\r\n                                name: \"eMandate\",\r\n                                link: \"eMandate\",\r\n                                click: true\r\n                            },\r\n                            {\r\n                                name: \"Logs\",\r\n                                link: \"logs\",\r\n                                click: false\r\n                            }]\r\n                    })\r\n            }).catch(er => console.log(er))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn)\r\n            navigate('/')\r\n    }, [isLoggedIn])\r\n\r\n    const formSubmitHandler = async (event) => {\r\n        event.preventDefault()\r\n\r\n        let Merchant_Category_Code = ''\r\n        let Short_Code = ''\r\n        let UtilCode = ''\r\n        let CheckSum = ''\r\n        let Customer_Name = customerNameRef.current.value\r\n        let Customer_TelphoneNo = customerTelephoneRef.current.value\r\n        let Customer_EmailId = customerEmailIdRef.current.value\r\n        let Customer_Mobile = customerMobileRef.current.value\r\n        let Customer_AccountNo = customerAccountNoRef.current.value\r\n        let Customer_StartDate = customerStartDateRef.current.value\r\n        let Customer_ExpiryDate = customerExpiryDateRef.current.value\r\n        let Customer_DebitAmount = customerDebitAmountRef.current.value\r\n        let Customer_MaxAmount = customerMaxAmountRef.current.value\r\n        let Customer_DebitFrequency = customerDebitFrequencyRef.current.value\r\n        let Customer_SequenceType = customerSequenceTypeRef.current.value\r\n        let Customer_InstructedMemberId = customerIFSCRef.current.value\r\n        let Customer_Reference1 = customerReference1Ref.current.value\r\n        let Customer_Reference2 = customerReference2Ref.current.value\r\n        let Channel = channelRef.current.value\r\n        let Filler1 = filler1Ref.current.value\r\n        let Filler2 = filler2Ref.current.value\r\n        let Filler3 = filler3Ref.current.value\r\n        let Filler4 = filler4Ref.current.value\r\n        let Filler5 = filler5Ref.current.value\r\n        let Filler6 = filler6Ref.current.value\r\n        let Filler7 = filler7Ref.current.value\r\n        let Filler8 = filler8Ref.current.value\r\n        let Filler9 = filler9Ref.current.value\r\n        let Filler10 = filler10Ref.current.value\r\n\r\n        // const valid = isFormValid(Customer_Mobile, Customer_TelphoneNo, Customer_EmailId,Customer_AccountNo, Customer_ExpiryDate, Customer_StartDate, Customer_DebitAmount, Customer_MaxAmount, )\r\n\r\n        axios.get('http://localhost:3001/api/getCompanyCreds').then(res => {\r\n            // console.log(res)\r\n            UtilCode += res.data[0].UtilCode\r\n            Merchant_Category_Code += res.data[0].CategoryCode\r\n            Short_Code += res.data[0].ShortCode\r\n            // console.log(res.data[0].UtilCode)\r\n        })\r\n\r\n        axios.post('http://localhost:3001/api/aes256encrypt', {\r\n            Customer_Name,\r\n            Customer_Mobile,\r\n            Customer_EmailId,\r\n            Customer_AccountNo,\r\n            Short_Code,\r\n            Customer_Reference1,\r\n            Customer_Reference2,\r\n            UtilCode\r\n        }).then(res => {\r\n            console.log(res)\r\n        }).catch(e => console.log(e))\r\n\r\n        axios.post('http://localhost:3001/api/sha256encrypt', {\r\n            Customer_AccountNo,\r\n            Customer_StartDate,\r\n            Customer_ExpiryDate,\r\n            Customer_DebitAmount,\r\n            Customer_MaxAmount\r\n        }).then(res => {\r\n            CheckSum = res.data\r\n        }).catch(e => console.log(e))\r\n\r\n        const MsgId = uuid4()\r\n        let reqBody = {}\r\n\r\n        setTimeout(function () {\r\n            reqBody = {\r\n                UtilCode,\r\n                Short_Code,\r\n                Merchant_Category_Code,\r\n                CheckSum,\r\n                MsgId,\r\n                Customer_Name,\r\n                Customer_TelphoneNo,\r\n                Customer_EmailId,\r\n                Customer_Mobile,\r\n                Customer_AccountNo,\r\n                Customer_StartDate,\r\n                Customer_ExpiryDate,\r\n                Customer_DebitAmount,\r\n                Customer_MaxAmount,\r\n                Customer_DebitFrequency,\r\n                Customer_SequenceType,\r\n                Customer_InstructedMemberId,\r\n                Customer_Reference1,\r\n                Customer_Reference2,\r\n                Channel,\r\n                Filler1,\r\n                Filler2,\r\n                Filler3,\r\n                Filler4,\r\n                Filler5,\r\n                Filler6,\r\n                Filler7,\r\n                Filler8,\r\n                Filler9,\r\n                Filler10,\r\n            }\r\n\r\n            console.log(reqBody)\r\n        }, 500);\r\n    }\r\n\r\n    // const buttonChangeHandler = () => {\r\n    //     console.log(banks)\r\n    // }\r\n\r\n    const jobs = [\r\n        {\r\n            fn: fetchBankScheduler,\r\n            id: '1',\r\n            schedule: '30 9,21 * * *'\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Navbar elements={navbarElements}></Navbar>\r\n\r\n            {!accept && (\r\n                <TNC onClick={tncHandler}>\r\n                </TNC>\r\n            )\r\n\r\n            }\r\n\r\n            <div className={styles.container}>\r\n                <form className={styles.formContainer} onSubmit={formSubmitHandler}>\r\n                    <span className={styles.line}></span>\r\n                    <h2 className={styles.heading}>eMandate Form</h2>\r\n                    <div className={`${styles['input-block-container']}`}>\r\n                        <div className={`${styles['left-container']}`}>\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_Name\" className={styles.desc}>Customer Name<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_Name\" name=\"Customer_Name\" required ref={customerNameRef}></input>\r\n                            </div>\r\n                            {/* <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"UtilCode\" className={`${styles['label']}`}>Utility Code*</label>\r\n                                <input type=\"text\" id=\"UtilCode\" name=\"UtilCode\" required ref={utilCodeRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Merchant_Category_Code\" className={`${styles['label']}`}>Category Code*</label>\r\n                                <input type=\"text\" id=\"Merchant_Category_Code\" name=\"Merchant_Category_Code\" required ref={merchantCategoryCodeRef}></input>\r\n                            </div> */}\r\n\r\n                            {/* <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"MsgID\" className={`${styles['label']}`}>MsgId*</label>\r\n                                <input type=\"text\" id=\"MsgID\" name=\"MsgID\" required ref={msgIdRef}></input>\r\n                            </div> */}\r\n\r\n\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_EmailId\" className={styles.desc}>Customer Email Id<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_EmailId\" name=\"Customer_EmailId\" ref={customerEmailIdRef} required></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_StartDate\" className={styles.desc}>Start Date<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"date\" id=\"Customer_StartDate\" name=\"Customer_StartDate\" required ref={customerStartDateRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_DebitAmount\" className={styles.desc}>Amount to be Debitted<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"number\" id=\"Customer_DebitAmount\" name=\"Customer_DebitAmount\" required ref={customerDebitAmountRef}></input>\r\n                            </div>\r\n\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_MaxAmount\" className={styles.desc}>Max Amount</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_MaxAmount\" name=\"Customer_MaxAmount\" ref={customerMaxAmountRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_InstructedMemberId\" className={styles.desc}>IFSC Code<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_InstructedMemberId\" name=\"Customer_InstructedMemberId\" required ref={customerIFSCRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_Reference1\" className={styles.desc}>Customer Reference 1</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_Reference1\" name=\"Customer_Reference1\" ref={customerReference1Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler1\" className={styles.desc}>Filler 1</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler1\" name=\"Filler1\" placeholder=\"Filler1\" ref={filler1Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler3\" className={styles.desc}>Filler 3</label>\r\n\r\n                                <input className={styles.box} type=\"text\" id=\"Filler3\" name=\"Filler3\" placeholder=\"Filler3\" ref={filler3Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler5\" className={styles.desc}>Filler 5 - Account Type<span className={styles.req}>*</span></label>\r\n                                <select className={styles.selectbox} id=\"Filler5\" name=\"Filler5\" ref={filler5Ref}>\r\n                                    <option value=\"S\">Savings</option>\r\n                                    <option value=\"C\">Current</option>\r\n                                    <option value=\"O\">Other</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler7\" className={styles.desc}>Filler 7</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler7\" name=\"Filler7\" placeholder=\"Filler7\" ref={filler7Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler9\" className={styles.desc}>Filler 9 - To be left blank</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler9\" name=\"Filler9\" ref={filler9Ref}></input>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className={`${styles['right-container']}`}>\r\n\r\n                            {/* <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Short_Code\" className={`${styles['label']}`}>Short Code*</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Short_Code\" name=\"Short_Code\" required ref={shortCodeRef}></input>\r\n                            </div> */}\r\n\r\n                            {/* <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"CheckSum\" className={`${styles['label']}`}>Checksum*</label>\r\n                                <input className={styles.box} type=\"text\" id=\"CheckSum\" name=\"CheckSum\" required ref={checkSumRef}></input>\r\n                            </div> */}\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_Mobile\" className={styles.desc}>Customer MobileNo<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"number\" id=\"Customer_Mobile\" name=\"Customer_Mobile\" ref={customerMobileRef} required></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_TelphoneNo\" className={styles.desc}>Customer TelphoneNo</label>\r\n                                <input className={styles.box} type=\"number\" id=\"Customer_TelphoneNo\" name=\"Customer_TelphoneNo\" ref={customerTelephoneRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_ExpiryDate\" className={styles.desc}>Expiry Date</label>\r\n                                <input className={styles.box} type=\"date\" id=\"Customer_ExpiryDate\" name=\"Customer_ExpiryDate\" ref={customerExpiryDateRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_AccountNo\" className={styles.desc}>Customer Account No<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_AccountNo\" name=\"Customer_AccountNo\" required ref={customerAccountNoRef}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_DebitFrequency\" className={styles.desc}>Debit Frequency<span className={styles.req}>*</span></label>\r\n                                <select className={styles.selectbox} id=\"Customer_DebitFrequency\" name=\"Customer_DebitFrequency\" ref={customerDebitFrequencyRef}>\r\n                                    <option value=\"ADHO\">As and when presented</option>\r\n                                    <option value=\"INDA\">Intra-day</option>\r\n                                    <option value=\"DAIl\">Daily</option>\r\n                                    <option value=\"WEEK\">Weekly</option>\r\n                                    <option value=\"MNTH\">Monthly</option>\r\n                                    <option value=\"BIMN\">Bi-Monthly</option>\r\n                                    <option value=\"QURT\">Quarterly</option>\r\n                                    <option value=\"MIAN\">Half - Yearly</option>\r\n                                    <option value=\"YEAR\">Yearly</option>\r\n                                    <option value=\"\">One Off Payment</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_SequenceType\" className={styles.desc}>Customer Sequence Type<span className={styles.req}>*</span></label>\r\n                                <select className={styles.selectbox} id=\"Customer_SequenceType\" name=\"Customer_SequenceType\" ref={customerSequenceTypeRef}>\r\n                                    <option value=\"RCUR\">Recurring</option>\r\n                                    <option value=\"OOFF\">One Off</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Customer_Reference2\" className={styles.desc}>Customer Reference 2</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Customer_Reference2\" name=\"Customer_Reference2\" ref={customerReference2Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Channel\" className={styles.desc}>Channel - Netbanking/Debit card</label>\r\n                                <select className={styles.selectbox} id=\"Channel\" name=\"Channel\" ref={channelRef}>\r\n                                    <option value=\"Net\">Netbanking</option>\r\n                                    <option value=\"Debit\">Debit Card</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler2\" className={styles.desc}>Filler 2</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler2\" name=\"Filler2\" placeholder=\"Filler2\" ref={filler2Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler4\" className={styles.desc}>Filler 4 - PAN Number<span className={styles.req}>*</span></label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler4\" name=\"Filler4\" ref={filler4Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler6\" className={styles.desc}>Filler 6 - Customer Bank<span className={styles.req}>*</span></label>\r\n                                <select className={styles.selectbox} id=\"Filler6\" name=\"Filler6\" ref={filler6Ref}>\r\n                                    {banks && banks.map(bank => (\r\n                                        <option value={bank.bankID}>\r\n                                            {bank.bankName}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler8\" className={styles.desc}>Filler 8</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler8\" name=\"Filler8\" placeholder=\"Filler8\" ref={filler8Ref}></input>\r\n                            </div>\r\n\r\n                            <div className={`${styles['input-container']}`}>\r\n                                <label htmlFor=\"Filler10\" className={styles.desc}>Filler 10 - To be left blank</label>\r\n                                <input className={styles.box} type=\"text\" id=\"Filler10\" name=\"Filler10\" placeholder=\"\" ref={filler10Ref}></input>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Button type=\"submit\" className={styles.btn}>Submit<FontAwesomeIcon icon={faArrowRight} className={styles.arrow} /></Button>\r\n                </form>\r\n                {/* <button type=\"button\" onClick={buttonChangeHandler}>trigger</button> */}\r\n                <Schedule jobs={jobs} timeZone='UTC' dashboard={{ hidden: true }} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormContainer","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\login\\login.js",["67","68","69"],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\ErrorModal\\ErrorModal.js",[],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\2fa\\TwoFactor.js",["70","71"],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\Navbar\\navbar.js",["72","73"],[],"import {useState} from 'react'\r\nimport styles from './navbar.module.css'\r\nimport React from 'react'\r\nimport logo from './img/img1.jpg'\r\n\r\nconst Navbar = (props) => {\r\n    const elements = props.elements\r\n\r\n    const [toggle, setToggle]= useState(false) \r\n\r\n    function togglebutton (){\r\n        if(toggle)\r\n            setToggle(false)\r\n        else    \r\n            setToggle(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.navbar}>\r\n                <div>\r\n                    <a href='/'><img src={logo} className={styles.pic}></img></a>\r\n                    <div className={styles['line-container']} onClick= {togglebutton}>\r\n                        <div className={`${styles['line']} ${styles['line-1']} ${toggle ? styles.change: ''}`}></div>\r\n                        <div className={`${styles['line']} ${styles['line-2']} ${toggle ? styles.change: ''}`}></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className= {`${styles.navbarele} ${toggle ? styles.change: ''}`}>\r\n                    {elements && elements.map(element => {\r\n                        if (!element.click) {\r\n                            return (\r\n                                <>\r\n                                    <a href={`/${element.link}`} className={styles.ele}>{element.name}</a>\r\n                                </>\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                <>\r\n                                    <a href=\"\" className={styles.eleClick}>{element.name}</a>\r\n                                </>\r\n                            )\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\logout\\logout.js",["74"],[],"import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst Logout = (props) => {\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        axios.get('http://localhost:3001/api/logout').then(res => {\r\n            navigate('/')\r\n        })\r\n    }, [])\r\n    return (\r\n        <>\r\n            <h2> Logging Out User ! </h2>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Logout;","D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\logs\\logs.js",["75","76","77"],[],"D:\\Other Files\\tktnew\\eMandate\\client\\src\\components\\TNC\\tnc.js",[],[],{"ruleId":"78","severity":1,"message":"79","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":18},{"ruleId":"78","severity":1,"message":"82","line":2,"column":20,"nodeType":"80","messageId":"81","endLine":2,"endColumn":29},{"ruleId":"78","severity":1,"message":"83","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":14},{"ruleId":"84","severity":1,"message":"85","line":105,"column":8,"nodeType":"86","endLine":105,"endColumn":10,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":110,"column":8,"nodeType":"86","endLine":110,"endColumn":20,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":30,"column":26,"nodeType":"92","messageId":"93","endLine":30,"endColumn":28},{"ruleId":"90","severity":1,"message":"91","line":34,"column":29,"nodeType":"92","messageId":"93","endLine":34,"endColumn":31},{"ruleId":"84","severity":1,"message":"88","line":92,"column":8,"nodeType":"86","endLine":92,"endColumn":10,"suggestions":"94"},{"ruleId":"78","severity":1,"message":"82","line":3,"column":28,"nodeType":"80","messageId":"81","endLine":3,"endColumn":37},{"ruleId":"95","severity":1,"message":"96","line":107,"column":29,"nodeType":"97","endLine":107,"endColumn":65},{"ruleId":"95","severity":1,"message":"96","line":22,"column":33,"nodeType":"97","endLine":22,"endColumn":72},{"ruleId":"98","severity":1,"message":"99","line":40,"column":37,"nodeType":"97","endLine":40,"endColumn":76},{"ruleId":"84","severity":1,"message":"88","line":12,"column":8,"nodeType":"86","endLine":12,"endColumn":10,"suggestions":"100"},{"ruleId":"78","severity":1,"message":"101","line":35,"column":11,"nodeType":"80","messageId":"81","endLine":35,"endColumn":23},{"ruleId":"84","severity":1,"message":"88","line":50,"column":8,"nodeType":"86","endLine":50,"endColumn":10,"suggestions":"102"},{"ruleId":"90","severity":1,"message":"91","line":86,"column":31,"nodeType":"92","messageId":"93","endLine":86,"endColumn":33},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'styles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["103"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["104"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["105"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["106"],"'loginChecker' is assigned a value but never used.",["107"],{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"112","fix":"114"},{"desc":"112","fix":"115"},"Update the dependencies array to be: [isLoggedIn]",{"range":"116","text":"117"},"Update the dependencies array to be: [isLoggedIn, navigate]",{"range":"118","text":"119"},"Update the dependencies array to be: [navigate]",{"range":"120","text":"121"},{"range":"122","text":"121"},{"range":"123","text":"121"},[3622,3624],"[isLoggedIn]",[3712,3724],"[isLoggedIn, navigate]",[3185,3187],"[navigate]",[346,348],[1594,1596]]